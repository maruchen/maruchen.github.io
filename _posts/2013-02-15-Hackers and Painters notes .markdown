---
layout: post
title: 《黑客与画家》读书笔记
categories:
- reading notes
tags:
- notes
---

##第一章 为什么书呆子不受欢迎
学校和监狱一样。  
而真实世界的关键在于它的庞大规模。这使得你做的每件事都可能产生真正意义上的成果。因此善于发现正确的答案开始变得重要，这正是聪明人的优势所在。而学校、监狱、女士午餐会这种封闭的空间中，只对内部产生作用，对外部没有影响。  
如今的社会分工很明确，使得少年几乎没有可以胜任的工作。他们必须在学校里接受更长时间的“教育”。  
美国的教育也是这样：课本里是根本读不懂的《悲惨世界》，考题是从参考书上出的。  
美国的中学生花大量的时间、精力，让自己变得受欢迎。  
（学校）（公司）它只是一个暂时的 过程，只要你向前看，你就能超越他，哪怕现在你还是身在其中。  

##第二章 黑客与画家
黑客和科学家不一样。  
大学里教给我的编程方法都是错误的。你把整个程序想清楚的时间点应该是在编写代码的同时，而不是在编写代码之前。这与作家、画家、建筑师的做法一样，叫做打草稿。  
黑客与画家有一份白天的工作用来养家糊口，晚上做他们真正喜欢做的事。所以有开源社区。  
练习，不断练习。精雕细琢，精益求精。  

##第三章 不能说的话
你不得不遵守所处时代的流行，社会的禁忌；尽管可能从若干年后来看是荒谬的。  
你错误地把别人的观点当做自己的观点，而缺乏自己的独立思考。  
在科学领域中，质疑他人的结论和公认的假说是尤其重要的一件事。因为这是硬科学。  
训练自己天马行空，去想那些不能想的事情，这是一种锻炼。但是守口如瓶，只能在合适的、信得过的场合说。因为自由思考比畅所欲言更重要。  
守口如瓶的优点是节约时间精力，避免因为和别人论战而不得不成为语言学家。  
缺点是无法享受讨论的好处，比如激发新思维。  
反击的办法是：一、把辩论的对象提升到抽象的层次，攻击它的元标签；二、使用隐喻；三、使用幽默。  
人们都会说同样的话：“我们心态开放，愿意接受新思想”，可实际上，人们脑子里都有一根界限，早就认准了什么是对的什么是错的。  
敢于在心里质疑。  
时间是产生距离感的简单方法 ，除此之外，摆脱人群，远离当前时代的流行，制造距离感，不要成为人群的一份子。  
不仅要远距离观察人群，还要远距离观察自己。  
脑子里乱想的人实际上很难控制自己不乱说，不乱做。因为行为受潜意识影响。  

思考，只要你思考得有道理，你所认为的就很可能是对的。  

##第四章 良好的坏习惯
自由、反抗，与美国  

##第五章 另一条路
BS软件的好处 VS. 桌面软件。  
完成在线使用的用户数和购买软件的人数正相关。  
订阅报纸模式是互联网软件天然的收费方式。  
一定数量的盗版对软件公司是有好处的。因为有一部分人无论你的软件定价多少，都不会购买。这样的用户使用盗版，对你没有任何损失；反而多一个用户，增加你的市场影响力，而他毕业以后也可能购买正版。  
什么事情可以外包？什么事情不可以外包？公司内部所有不能直接感受到行业竞争压力的部门都应该外包出去。  
真正起决定性作用的推广渠道只有一个，就是我们自己的网站。  
互联网软件更新迭代永无止境，所以程序员必需长期加班，而且压力大。  
创业。  
创业就是把正规军拖入沼泽地；解决一个又一个大公司难以解决的问题。否则，凭什么让你脱颖而出？  

##第六章 如何创造财富
我认为，任何一个通过自身努力而致富的人，应该同时具有可测量性和可放大性。  
一是工作的表现具有可测量性，并据此得到回报；  
可放大性是有决策的权力。  
收入和风险是对称的；如果有巨大的活力可能，就必然存在巨大的失败可能。CEO、电影明星、基金经理、运动员的头顶都悬着一把宝剑，随时可能掉下来。如果你有一个令你感到安全的工作，你是不会致富的，因为没有危险，就几乎等于没有可放大性。  
成为某个攻克难题的小团体的一部分。  
技术的发展很快，今天很有价值的技术，几年后可能就会丧失价值。  
一起把饼做大，而不会因为一个人多赚钱了导致其他人少赚钱。  

##第七章 关注贫富分化
只要是合理的赚钱，贫富分化是必然的结果。大锅粥反而不能激励有才干的人为社会创造更多财富。  
要保护合法合理赚钱的人。  

##第八章 防止垃圾邮件的一种方法
略过

##第九章 设计者的品味
公认美的东西是存在的，但必须经过艰苦的努力才可能得到。艰苦的却看似容易的解。

##第十章 编程语言解析

##第十一章 一百年后的编程语言
编程语言进化的脉络

##第十二章 拒绝平庸
Lisp geek

##第十三章 书呆子的复仇
继续讲Lisp

##第十四章 梦寐以求的编程语言
“最好的文字来自不停的修改”，所有优秀的作家都是这样。编程也是这样。  
为了写出优秀的软件，你必须同时具有两种相互冲突的信念。一方面，初生牛犊不怕虎，对自己的能力信心万丈；另一方面，又要对自己的能力抱怀疑态度。实际上这两者并不冲突：对解决难题的可能性保持乐观，对当前解法的合理性保持怀疑。精益求精。  

##第十五章 设计与研究
先做出原型，再慢慢修改，精雕细琢。这样也有利于鼓舞士气。

